{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\nmodule.exports = {\n  transformRequest: [function (data, headers) {\n    if (utils.isFormData(data)) {\n      return data;\n    }\n\n    if (utils.isArrayBuffer(data)) {\n      return data;\n    }\n\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n\n    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {\n      // Set application/json if no Content-Type has been specified\n      if (!utils.isUndefined(headers)) {\n        utils.forEach(headers, function (val, key) {\n          if (key.toLowerCase() === 'content-type') {\n            headers['Content-Type'] = val;\n          }\n        });\n\n        if (utils.isUndefined(headers['Content-Type'])) {\n          headers['Content-Type'] = 'application/json;charset=utf-8';\n        }\n      }\n\n      return JSON.stringify(data);\n    }\n\n    return data;\n  }],\n  transformResponse: [function (data) {\n    if (typeof data === 'string') {\n      data = data.replace(PROTECTION_PREFIX, '');\n\n      try {\n        data = JSON.parse(data);\n      } catch (e) {\n        /* Ignore */\n      }\n    }\n\n    return data;\n  }],\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    },\n    patch: utils.merge(DEFAULT_CONTENT_TYPE),\n    post: utils.merge(DEFAULT_CONTENT_TYPE),\n    put: utils.merge(DEFAULT_CONTENT_TYPE)\n  },\n  timeout: 0,\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN'\n};","map":{"version":3,"sources":["C:/Users/hp/Mini-Project-Ment/node_modules/youtube-api-search/node_modules/axios/lib/defaults.js"],"names":["utils","require","PROTECTION_PREFIX","DEFAULT_CONTENT_TYPE","module","exports","transformRequest","data","headers","isFormData","isArrayBuffer","isArrayBufferView","buffer","isObject","isFile","isBlob","isUndefined","forEach","val","key","toLowerCase","JSON","stringify","transformResponse","replace","parse","e","common","patch","merge","post","put","timeout","xsrfCookieName","xsrfHeaderName"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AAEA,IAAIC,iBAAiB,GAAG,cAAxB;AACA,IAAIC,oBAAoB,GAAG;AACzB,kBAAgB;AADS,CAA3B;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,gBAAgB,EAAE,CAAC,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AAC1C,QAAGR,KAAK,CAACS,UAAN,CAAiBF,IAAjB,CAAH,EAA2B;AACzB,aAAOA,IAAP;AACD;;AACD,QAAIP,KAAK,CAACU,aAAN,CAAoBH,IAApB,CAAJ,EAA+B;AAC7B,aAAOA,IAAP;AACD;;AACD,QAAIP,KAAK,CAACW,iBAAN,CAAwBJ,IAAxB,CAAJ,EAAmC;AACjC,aAAOA,IAAI,CAACK,MAAZ;AACD;;AACD,QAAIZ,KAAK,CAACa,QAAN,CAAeN,IAAf,KAAwB,CAACP,KAAK,CAACc,MAAN,CAAaP,IAAb,CAAzB,IAA+C,CAACP,KAAK,CAACe,MAAN,CAAaR,IAAb,CAApD,EAAwE;AACtE;AACA,UAAI,CAACP,KAAK,CAACgB,WAAN,CAAkBR,OAAlB,CAAL,EAAiC;AAC/BR,QAAAA,KAAK,CAACiB,OAAN,CAAcT,OAAd,EAAuB,UAAUU,GAAV,EAAeC,GAAf,EAAoB;AACzC,cAAIA,GAAG,CAACC,WAAJ,OAAsB,cAA1B,EAA0C;AACxCZ,YAAAA,OAAO,CAAC,cAAD,CAAP,GAA0BU,GAA1B;AACD;AACF,SAJD;;AAMA,YAAIlB,KAAK,CAACgB,WAAN,CAAkBR,OAAO,CAAC,cAAD,CAAzB,CAAJ,EAAgD;AAC9CA,UAAAA,OAAO,CAAC,cAAD,CAAP,GAA0B,gCAA1B;AACD;AACF;;AACD,aAAOa,IAAI,CAACC,SAAL,CAAef,IAAf,CAAP;AACD;;AACD,WAAOA,IAAP;AACD,GA1BiB,CADH;AA6BfgB,EAAAA,iBAAiB,EAAE,CAAC,UAAUhB,IAAV,EAAgB;AAClC,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAGA,IAAI,CAACiB,OAAL,CAAatB,iBAAb,EAAgC,EAAhC,CAAP;;AACA,UAAI;AACFK,QAAAA,IAAI,GAAGc,IAAI,CAACI,KAAL,CAAWlB,IAAX,CAAP;AACD,OAFD,CAEE,OAAOmB,CAAP,EAAU;AAAE;AAAc;AAC7B;;AACD,WAAOnB,IAAP;AACD,GARkB,CA7BJ;AAuCfC,EAAAA,OAAO,EAAE;AACPmB,IAAAA,MAAM,EAAE;AACN,gBAAU;AADJ,KADD;AAIPC,IAAAA,KAAK,EAAE5B,KAAK,CAAC6B,KAAN,CAAY1B,oBAAZ,CAJA;AAKP2B,IAAAA,IAAI,EAAE9B,KAAK,CAAC6B,KAAN,CAAY1B,oBAAZ,CALC;AAMP4B,IAAAA,GAAG,EAAE/B,KAAK,CAAC6B,KAAN,CAAY1B,oBAAZ;AANE,GAvCM;AAgDf6B,EAAAA,OAAO,EAAE,CAhDM;AAkDfC,EAAAA,cAAc,EAAE,YAlDD;AAmDfC,EAAAA,cAAc,EAAE;AAnDD,CAAjB","sourcesContent":["'use strict';\r\n\r\nvar utils = require('./utils');\r\n\r\nvar PROTECTION_PREFIX = /^\\)\\]\\}',?\\n/;\r\nvar DEFAULT_CONTENT_TYPE = {\r\n  'Content-Type': 'application/x-www-form-urlencoded'\r\n};\r\n\r\nmodule.exports = {\r\n  transformRequest: [function (data, headers) {\r\n    if(utils.isFormData(data)) {\r\n      return data;\r\n    }\r\n    if (utils.isArrayBuffer(data)) {\r\n      return data;\r\n    }\r\n    if (utils.isArrayBufferView(data)) {\r\n      return data.buffer;\r\n    }\r\n    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {\r\n      // Set application/json if no Content-Type has been specified\r\n      if (!utils.isUndefined(headers)) {\r\n        utils.forEach(headers, function (val, key) {\r\n          if (key.toLowerCase() === 'content-type') {\r\n            headers['Content-Type'] = val;\r\n          }\r\n        });\r\n\r\n        if (utils.isUndefined(headers['Content-Type'])) {\r\n          headers['Content-Type'] = 'application/json;charset=utf-8';\r\n        }\r\n      }\r\n      return JSON.stringify(data);\r\n    }\r\n    return data;\r\n  }],\r\n\r\n  transformResponse: [function (data) {\r\n    if (typeof data === 'string') {\r\n      data = data.replace(PROTECTION_PREFIX, '');\r\n      try {\r\n        data = JSON.parse(data);\r\n      } catch (e) { /* Ignore */ }\r\n    }\r\n    return data;\r\n  }],\r\n\r\n  headers: {\r\n    common: {\r\n      'Accept': 'application/json, text/plain, */*'\r\n    },\r\n    patch: utils.merge(DEFAULT_CONTENT_TYPE),\r\n    post: utils.merge(DEFAULT_CONTENT_TYPE),\r\n    put: utils.merge(DEFAULT_CONTENT_TYPE)\r\n  },\r\n\r\n  timeout: 0,\r\n\r\n  xsrfCookieName: 'XSRF-TOKEN',\r\n  xsrfHeaderName: 'X-XSRF-TOKEN'\r\n};\r\n"]},"metadata":{},"sourceType":"script"}